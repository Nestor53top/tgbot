import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ContentType
from aiogram.filters import CommandStart
from aiogram import F
import asyncio
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
logging.basicConfig(level=logging.INFO)

# ‚úÖ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
API_TOKEN = os.getenv("8039622211:AAFAlP4a20MzceoPU7QsafkYkwlb3qLaMRs")
AUTHORIZED_USERS = {int(uid) for uid in os.getenv("1261999778", "").split(",") if uid.strip().isdigit()}

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_storage = {
    'files': [],
    'links': [],
    'messages': []
}

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÅ –§–∞–π–ª—ã"), KeyboardButton(text="üîó –°—Å—ã–ª–∫–∏")],
        [KeyboardButton(text="üí¨ –°–æ–æ–±—â–µ–Ω–∏—è")]
    ],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def start(msg: types.Message):
    user_id = msg.from_user.id
    if user_id in AUTHORIZED_USERS:
        await msg.answer("‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_keyboard)
    else:
        await msg.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

@dp.message(F.content_type.in_({ContentType.TEXT, ContentType.DOCUMENT}))
async def handle_input(msg: types.Message):
    user_id = msg.from_user.id
    if user_id not in AUTHORIZED_USERS:
        await msg.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if msg.text in ["üìÅ –§–∞–π–ª—ã", "üîó –°—Å—ã–ª–∫–∏", "üí¨ –°–æ–æ–±—â–µ–Ω–∏—è"]:
        cat = msg.text
        data = user_storage
        if cat == "üìÅ –§–∞–π–ª—ã":
            await msg.answer("üóÇ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n" + "\n".join(data['files']) if data['files'] else "–ü–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.")
        elif cat == "üîó –°—Å—ã–ª–∫–∏":
            await msg.answer("üîó –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n" + "\n".join(data['links']) if data['links'] else "–ü–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫.")
        elif cat == "üí¨ –°–æ–æ–±—â–µ–Ω–∏—è":
            await msg.answer("üí¨ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n" + "\n".join(data['messages']) if data['messages'] else "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    if msg.document:
        user_storage['files'].append(f"{msg.from_user.username or msg.from_user.first_name}: {msg.document.file_name}")
        await msg.answer("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. (–°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ üìÅ –§–∞–π–ª—ã)")
    elif msg.text.startswith("http://") or msg.text.startswith("https://"):
        user_storage['links'].append(f"{msg.from_user.username or msg.from_user.first_name}: {msg.text}")
        await msg.answer("–°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. (–°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ üîó –°—Å—ã–ª–∫–∏)")
    else:
        user_storage['messages'].append(f"{msg.from_user.username or msg.from_user.first_name}: {msg.text}")
        await msg.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. (–°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ üí¨ –°–æ–æ–±—â–µ–Ω–∏—è)")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
if __name__ == "__main__":
    asyncio.run(main())

